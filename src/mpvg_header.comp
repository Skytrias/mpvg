#define TILE_SIZE 32
#define OPERATION_INVALID 100000

// kind of curve
#define C_LINE 0
#define C_QUADRATIC 1
#define C_CUBIC 2

// orientation of curve
#define C_BL 0
#define C_BR 1
#define C_TL 2
#define C_TR 3

struct Curve {
	vec2 p0;
	vec2 p1;
	vec2 p2;
	vec2 p3;
	int count;
	int path_index;
};

struct Implicit_Curve {
	vec4 box;
	
	vec2 hull_vertex;
	vec2 hull_padding;

	int kind;
	int orientation;
	int sign;
	int winding_increment;

	mat3 implicit_matrix;
};

struct Tile_Queue {
	// op linked list
	int op_head;
	
	// link to next tile to process
	int tile_queue_next;

	// info
	int path_index;
	int winding_offset;
};

struct Tile_Operation {
	int curve_index;
	int cross_right;
	int cross_bottom;
	
	int tile_queue_index;
	int path_index;
	int op_next; // link to next op
};

struct Path {
	vec4 color;
	vec4 box;
	vec4 clip;

	float xform[6];

	int curve_index_start;
	int curve_index_current;
};

struct Path_Queue {
	// tile start
	int x;
	int y;

	// tile counts
	int tiles_x;
	int tiles_y;

	int tile_queue_index;
	int index;
};

layout(std430, binding = 0) buffer Input_Indices {
	int implicit_curves;
	int paths;
	int tile_operations;
	int tile_queues;

	int tiles_x;
	int tiles_y;
} indices;

layout(std430, binding = 1) readonly buffer Input_Curves {
	Curve data[];
} curves;

layout(std430, binding = 2) buffer Output_Implicit_Curves {
	Implicit_Curve data[];
} implicit_curves;

layout(std430, binding = 3) buffer Tile_Queues {
	Tile_Queue data[];
} tile_queues;

layout(std430, binding = 4) buffer Tile_Operations {
	Tile_Operation data[];
} tile_operations;

layout(std430, binding = 5) buffer Paths {
	Path data[];
} paths;

layout(std430, binding = 6) buffer Path_Queues {
	Path_Queue data[];
} path_queues;

layout(std430, binding = 7) buffer Screen_Tiles {
	int data[];
} screen_tiles;

float ccw(vec2 a, vec2 b, vec2 c) {
	return ((b.x-a.x)*(c.y-a.y) - (b.y-a.y)*(c.x-a.x));
}

int curve_side(Implicit_Curve curve, vec2 pt) {
	int side = 0;

	// pt.y inside box
	if (pt.y > curve.box.w || pt.y <= curve.box.y) {
		// pt.x inside box
		if (pt.x > curve.box.x && pt.x <= curve.box.z) {
			// pt.y really inside
			if (pt.y > curve.box.w) {
				side = (curve.orientation == C_TL || curve.orientation == C_BR) ? -1 : 1;
			}	else {
				side = (curve.orientation == C_TL || curve.orientation == C_BR) ? 1 : -1;
			}
		}
	} else if(pt.x > curve.box.z) {
		// pt.x to right of the curve
		side = 1;
	} else if(pt.x <= curve.box.x) {
		// pt.x to left of the curve
		side = -1;
	} else {
		vec2 a, b;

		switch (curve.orientation) {
			case C_TL: {
				a = curve.box.xy;
				b = curve.box.zw;
				break;
			}

			case C_BR: {
				a = curve.box.zw;
				b = curve.box.xy;
				break;
			}

			case C_TR: {
				a = curve.box.xw;
				b = curve.box.zy;
				break;
			}

			case C_BL: {
				a = curve.box.zy;
				b = curve.box.xw;
				break;
			}
		}

		vec2 c = curve.hull_vertex;

		if (ccw(a, b, pt) < 0) {
			// other side of the diagonal
			side = (curve.orientation == C_BR || curve.orientation == C_TR) ? -1 : 1;
		}	else if(ccw(b, c, pt) < 0 || ccw(c, a, pt) < 0) {
			// same side of the diagonal, but outside curve hull
			side = (curve.orientation == C_BL || curve.orientation == C_TL) ? -1 : 1;
		}	else {
			// inside curve hull
			switch(curve.kind) {	
				case C_LINE:
					side = 1;
					break;

				case C_QUADRATIC: {
					vec3 ph = vec3(pt.x, pt.y, 1);
					vec3 klm = curve.implicit_matrix * ph;
					side = ((klm.x*klm.x - klm.y)*klm.z < 0) ? -1 : 1;
				} break;

				case C_CUBIC: {
					vec3 ph = vec3(pt.x, pt.y, 1);
					vec3 klm = curve.implicit_matrix * ph;
					side = (curve.sign * (klm.x*klm.x*klm.x - klm.y*klm.z) < 0)? -1 : 1;
				} break;
			}
		}
	}

	return(side);
}