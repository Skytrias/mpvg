void main() {
	ivec2 tile_coord = ivec2(gl_GlobalInvocationID.xy);
	uint screen_tile_index = tile_coord.y * gl_NumWorkGroups.x + tile_coord.x;

	// set link
	Screen_Tile st;
	st.tile_queue_offset = -1;
	screen_tiles.data[screen_tile_index] = st;

	int last_tile_queue = -1;

	// iterate all paths
	for (int path_index = 0; path_index < paths.data.length(); path_index += 1) {
		Path_Queue path_queue = path_queues.data[path_index];
		ivec2 path_tile_coord = tile_coord - ivec2(path_queue.x, path_queue.y);

		Path path = paths.data[path_index];
		float x_max = min(path.box.z, path.clip.z);
		int tile_max = int(x_max) / TILE_SIZE;
		int path_tile_max = tile_max - path_queue.x;

		// look for matching tile coordinates
		if (path_tile_coord.x >= 0 && path_tile_coord.x <= path_tile_max && path_tile_coord.y >= 0 && path_tile_coord.y < path_queue.tiles_y) {
			// get tile queue for the wanted tile index
			int path_tile_index = path_tile_coord.y * path_queue.tiles_x + path_tile_coord.x;
			int tile_queue_index = path_queue.tile_queue_index + path_tile_index;
			Tile_Queue tile_queue = tile_queues.data[tile_queue_index];

			int winding_offset = tile_queue.winding_offset;

			// no tile ops?
			if (tile_queue.tile_operation_count == 0) {
				if ((winding_offset & 1) == 1) {
					vec4 clip = path.clip;
					vec4 tile_box = vec4(tile_coord.x, tile_coord.y, tile_coord.x + 1, tile_coord.y + 1);
					tile_box *= TILE_SIZE;

					// when correct add to screen tiles
					if (path.color.a == 1 && tile_box.x >= clip.x && tile_box.z < clip.z && tile_box.y >= clip.y && tile_box.w < clip.w) {
						st.tile_queue_offset = path_tile_index;
						screen_tiles.data[screen_tile_index] = st;
					} else {
						if (last_tile_queue == -1) {
							st.tile_queue_offset = tile_queue_index;
							screen_tiles.data[screen_tile_index] = st;
						} else {
							tile_queues.data[last_tile_queue].tile_queue_next = tile_queue_index;		
						}
					}

					last_tile_queue = tile_queue_index;
				}
				// else, tile is fully uncovered, skip path
			} else {
				if (last_tile_queue == -1) {
					// set first tile queue to screen tile
					st.tile_queue_offset = tile_queue_index;
					screen_tiles.data[screen_tile_index] = st;
				} else {
					// link up previous tile queue to this current tile queue
					tile_queues.data[last_tile_queue].tile_queue_next = tile_queue_index;
				}

				last_tile_queue = tile_queue_index;
			}
		}
	}
}
