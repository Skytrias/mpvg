layout(rgba8, binding = 0) uniform image2D img_output;

#define MAX_SAMPLES 8

void main() {
	// screen tile index
	ivec2 tile_coord = ivec2(gl_GlobalInvocationID.xy);
	uint screen_tile_index = gl_WorkGroupID.x + gl_WorkGroupID.y * indices.tiles_x;

	int path_index = 0;
	Screen_Tile st = screen_tiles.data[screen_tile_index];
	int tile_queue_offset = st.tile_queue_offset;

	// prepare anti aliasing
	vec2 center_coord = gl_GlobalInvocationID.xy + vec2(0.5, 0.5);
	vec2 sample_coords[MAX_SAMPLES] = vec2[MAX_SAMPLES](
		center_coord + vec2(1, 3) / 16,
		center_coord + vec2(-1, -3) / 16,
		center_coord + vec2(5, -1) / 16,
		center_coord + vec2(-3, 5) / 16,
		center_coord + vec2(-5, -5) / 16,
		center_coord + vec2(-7, 1) / 16,
		center_coord + vec2(3, -7) / 16,
		center_coord + vec2(7, 7) / 16
	);

	vec4 color[MAX_SAMPLES] = vec4[MAX_SAMPLES](
		vec4(0, 0, 0, 0),
		vec4(0, 0, 0, 0),
		vec4(0, 0, 0, 0),
		vec4(0, 0, 0, 0),
		
		vec4(0, 0, 0, 0),
		vec4(0, 0, 0, 0),
		vec4(0, 0, 0, 0),
		vec4(0, 0, 0, 0)
	);
	int winding[MAX_SAMPLES] = int[MAX_SAMPLES](0, 0, 0, 0, 0, 0, 0, 0);

	// iterate first tile queue
	while (tile_queue_offset != -1) {
		Tile_Queue tile_queue = tile_queues.data[tile_queue_offset];

		// fetch info from tile queue instead
		path_index = tile_queue.path_index;
		for (int sample_index = 0; sample_index < MAX_SAMPLES; sample_index += 1) {
			// TODO do path color stuf here too
			winding[sample_index] = tile_queue.winding_offset;
		}

		for (int i = 0; i < tile_queue.tile_operation_count; i += 1) {
			int tile_op_index = tile_queue.tile_operation_start + i;
			Tile_Operation op = tile_operations.data[tile_op_index];

			// run through samples
			for (int sample_index = 0; sample_index < MAX_SAMPLES; sample_index += 1) {
				vec2 sample_coord = sample_coords[sample_index];
				
				// normal curve winding 
				Implicit_Curve curve = implicit_curves.data[op.curve_index];
				if (sample_coord.y > curve.box.y && sample_coord.y <= curve.box.w && curve_side(curve, sample_coord) < 0) {
					winding[sample_index] += curve.winding_increment;
				}

				// apply command crosses
				if (op.cross_right != 0) {
					if ((curve.orientation == C_BR || curve.orientation == C_TL) && (sample_coord.y > curve.box.w)) {
						winding[sample_index] += curve.winding_increment;
					} else if( (curve.orientation == C_BL || curve.orientation == C_TR) && (sample_coord.y > curve.box.y)) {
						winding[sample_index] -= curve.winding_increment;
					}
				}
			}
		}			

		// link to other tile_queues if they are chained
		tile_queue_offset = tile_queue.tile_queue_next;
	}

	Path path = paths.data[path_index];
	vec4 pixel_color = vec4(0, 0, 0, 0);
	// vec4 pixel_color = vec4(0, 0, 0, 1);
	// vec4 pixel_color = vec4(1, 1, 1, 1);
	vec4 path_color = path.color;
	path_color.rgb *= path_color.a;
	vec4 clip = path.clip;

	// TODO fill / stroke?
	for (int sample_index = 0; sample_index < MAX_SAMPLES; sample_index += 1) {
		vec2 sample_coord = sample_coords[sample_index];

		if (sample_coord.x >= clip.x && sample_coord.x < clip.z && sample_coord.y >= clip.y && sample_coord.y < clip.w) {
			if ((winding[sample_index] & 1) == 1) {
				vec4 next_color = path_color;
				color[sample_index] = color[sample_index] * (1 - next_color.a) + next_color;
			}
		}

		pixel_color += color[sample_index];
	}
	pixel_color /= MAX_SAMPLES;


	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	if (pixel_coords.x % TILE_SIZE == 0 || pixel_coords.y % TILE_SIZE == 0) {
		// for (int sample_index = 0; sample_index < MAX_SAMPLES; sample_index += 1) {
			pixel_color = vec4(0, 0, 0, 1);
		// }
	}
	imageStore(img_output, pixel_coords, pixel_color);
}