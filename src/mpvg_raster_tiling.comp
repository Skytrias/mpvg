layout(rgba8, binding = 0) uniform image2D img_output;

float ccw(vec2 a, vec2 b, vec2 c) {
	return((b.x-a.x)*(c.y-a.y) - (b.y-a.y)*(c.x-a.x));
}

int curve_side(Implicit_Curve curve, vec2 pt) {
	int side = 0;

	// pt.y inside box
	if (pt.y > curve.box.w || pt.y <= curve.box.y) {
		// pt.x inside box
		if (pt.x > curve.box.x && pt.x <= curve.box.z) {
			// pt.y really inside
			if (pt.y > curve.box.w) {
				side = (curve.orientation == C_TL || curve.orientation == C_BR) ? -1 : 1;
			}	else {
				side = (curve.orientation == C_TL || curve.orientation == C_BR) ? 1 : -1;
			}
		}
	} else if(pt.x > curve.box.z) {
		// pt.x to right of the curve
		side = 1;
	} else if(pt.x <= curve.box.x) {
		// pt.x to left of the curve
		side = -1;
	} else {
		vec2 a, b;

		switch (curve.orientation) {
			case C_TL: {
				a = curve.box.xy;
				b = curve.box.zw;
				break;
			}

			case C_BR: {
				a = curve.box.zw;
				b = curve.box.xy;
				break;
			}

			case C_TR: {
				a = curve.box.xw;
				b = curve.box.zy;
				break;
			}

			case C_BL: {
				a = curve.box.zy;
				b = curve.box.xw;
				break;
			}
		}

		vec2 c = curve.hull_vertex;

		if (ccw(a, b, pt) < 0) {
			// other side of the diagonal
			side = (curve.orientation == C_BR || curve.orientation == C_TR) ? -1 : 1;
		}	else if(ccw(b, c, pt) < 0 || ccw(c, a, pt) < 0) {
			// same side of the diagonal, but outside curve hull
			side = (curve.orientation == C_BL || curve.orientation == C_TL) ? -1 : 1;
		}	else {
			// inside curve hull
			switch(curve.kind) {
				case C_LINE:
					side = 1;
					break;

				case C_QUADRATIC: {
					vec3 ph = vec3(pt.x, pt.y, 1);
					vec3 klm = curve.implicit_matrix * ph;
					side = ((klm.x*klm.x - klm.y)*klm.z < 0) ? -1 : 1;
				} break;

				case C_CUBIC: {
					vec3 ph = vec3(pt.x, pt.y, 1);
					vec3 klm = curve.implicit_matrix * ph;
					side = (curve.sign * (klm.x*klm.x*klm.x - klm.y*klm.z) < 0)? -1 : 1;
				} break;
			}
		}
	}

	return(side);
}

void main() {
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	vec2 px = gl_GlobalInvocationID.xy;

	uint tile_index = gl_WorkGroupID.x + gl_WorkGroupID.y * tiles_x;
	Tile tile = tiles.data[tile_index];

	int path_index = 0;
	int winding_number = tile.winding_offset;
	int op_index = tile.op_first;

	// iterate only added operations
	while (op_index != -1) {
		Operation op = operations.data[op_index];

		if (op.kind == OPERATION_START) {
			path_index = op.path_index;
		} else if (op.kind == OPERATION_SEGMENT) {
			Implicit_Curve curve = implicit_curves.data[op.curve_index];
	
			// normal curve winding 
			int side = curve_side(curve, px);
			if (px.y > curve.box.y && px.y <= curve.box.w) {
				if (side < 0) {
					winding_number += curve.winding_increment;
				} 
			}

			// apply command crosses
			if (op.cross_right) {
				if ((curve.orientation == C_BR || curve.orientation == C_TL) && (px.y > curve.box.w)) {
					winding_number += curve.winding_increment;
				} else if( (curve.orientation == C_BL || curve.orientation == C_TR) && (px.y > curve.box.y)) {
					winding_number -= curve.winding_increment;
				}
			}
		}
		
		op_index = op.op_next;
	}

	Path path = paths.data[path_index];
	vec4 color = vec4(1);

	// TODO fill / stroke?
	if ((winding_number & 1) == 1) {
		color = path.color;
	}

	if (pixel_coords.x % tiles_size == 0 || pixel_coords.y % tiles_size == 0) {
		color = vec4(0, 0, 0, 1);
	}

	imageStore(img_output, pixel_coords, color);
}